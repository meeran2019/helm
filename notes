---------------------------------------------------------------------------------------------------------
INTRODUCTION: 
---------------------------------------------------------------------------------------------------------

What is HELM?:

        Helm is a package manager for kubernetes. 
        In templates, it contains all objects require for the projects and manage as package. 
        Without kubernetes, it requires to install and delete all objects like pods, deployment, services etc separately which cause operational overhead when project is complex. 

        Also can keep all objects in single file but still it is complex to manage and debug.

What is HELM2 Vs Helm3?:
        In Helm3, Tiller is removed. In Helm2, due to no RBAC, it is intermediate between user and kubernetes API and render the yaml file.
        In Helm3, do 3 way strategic merge means which consider current manifest, new manifest and any manual edit (using kubectl edit). In Helm2, consider only current and new manifest.
        In Helm3, Relase name is unique to Namespace level. In Helm2, release name is unique to cluster level. 
        In Helm3, Secret is used to store release information. In Helm2, uses config map. 

Installing and Configuration:     

        https://helm.sh/docs/intro/install/


Helm Components: 

        Charts              -   collection of objects. Contains instruction for helm needed.
        Release             -   Release chart to kubernetes. Each release can have multiple revision.
        metadata            -   saves in kubernetes itself as secrets.
        template            -   it is folder which contains all the kubernetes yaml files. 
        values.yaml         -   it contains the variable which applied in template.

    Release is used because multiple release can run using same chart. 

    Helm repositories is provided by different provider like bitnami etc. Artifcathub.io contains all repositories. 


Helm Charts: 

        It contains instructions to run.

        chart.yaml
        values.yaml 
        template 

Chart.yaml: 

        apiVersion      -   v1 for helm2 , v2 for helm3.
        appVersion      -   version of application
        version         -   version of chart itself. 
        name            -   name of chart 
        type            -   library & application.
        dependencies    -   can include other charts. 
        keywords        -   
        mainteners      -   email & name.

    hellowordldchart 
        chart.yaml
        templates
        values.yaml 
        charts          -   directory contain other charts. 


Working with Helm - Basics: 

        helm --help                 -   shares command details.
        helm search hub name        -   to search in artifact hub.
        helm search repo repo-name  -   to search in specific repository.

        helm repo add bitnami https:path    -   add bitnami repo to local.
        helm install release-name chart     -   to install chart. 

        helm list                   -   list all releases.
        helm uninstall release      -   to uninstall release.


Customize Chart Parameters:        

    At CLI: 

        helm install --set key1=value1 release-name chart-name          -> This override in values.yaml 

    Own Custom values.yml: 

            custom-values.yml: 

        helm install --values=custom-values.yml release-name chart-name 

    Update directly in values.yaml: 

        helm pull chart-name            -   pull in archived form.
        helm pull --untar chart-name    -   pull in unarchived form.
        helm install release-name ./chart-name      -   While run, refer the local directory path. 


Life cycle management with Helm: 

    helm upgrade release-name               -   to upgrade release to latest version. 
    helm history release-name               -   gives history of releases
    helm rollback release-name revision     -   It creates revision3 and revert the value of revision1.

    NOTE: Persistent volume / data will not have any change during rollback or upgrade. 

    
---------------------------------------------------------------------------------------------------------
HELM CHARTS ANATOMY:
---------------------------------------------------------------------------------------------------------

WRITING A HELM CHART: 

        {{ }}                   -       Template directive 
        {{ .Release.Name }}     -       . represemt root level scope. 
        Release.Name            -       Release name. 

2nd part name is always capital because these are builtin objects. 

        Release.Name 
        Release.Namespace 
        Release.Revison 

        Chart.Name
        Chart.ApiVersion
        Chart.Version
        Chart.Type 

        Capabilities.APiVersions
        Capabilities.KubeVersion
        Capabilities.GitCommit 

        Values.key1
        Values.key2 


VERIFYING HELM CHART: 

        LINT: 
                Verify chart and yaml format is working correct. 
                helm lint ./chart 

        TEMPLATE:
                It renders the template locally and displays output. 
                helm template ./chart 
                helm template release-name ./chart 
                helm template ./chart --debug   

        DRY RUN: 
                Some errors can only be catch by kubernetes. 
                helm install release-name chart-name --dry-run


FUNCTIONS: 

        {{ upper .values.image }}               -       convert to upper case 
        {{ quote .values.image }}               -       add quote "" 
        replace 
        shuffle 
        {{ default "nginx" .Values.image }}     -       function default to add default value. 


PIPELINES: 

        {{ values.image | upper }}               -      convert to upper case 
        {{ values.image | default "nginx"}}      -      take default value if not maintained.


CONDITIONALS:

        If condition is used to check the condition. If value is maintained then only execute the block. 

                {{ if .Values.image }}
                {{ end }}

        - is used to trim the line in output. 

                {{- if .Values.image }}
                {{- end }}

        else if - used to check other conditions. 

                {{ else if eq .Values.image "hr" }}

        else - if "if" condition not satisfied.

                {{ else }}


WITH BLOCKS: 

        Scope of the variable. 

                root -> image -> tag -> test1

                image: 
                tag: 
                test1: 

        With this scope, no need to specify full path. .Values.image.tag.test1
                {{- with .Values.image.tag}}
                        {{ .test1 }}
                {{ end }}

        $.Values.scope1.scope2          -> $ is used to override the scope.


RANGES: 

        It is like for loops.

        regions: 
        - asia
        - europe
        - africa 
        - america 

        {{- range .values.regions }}            -       scope of range. 
        - {{. | quotes }}                       -       add quotes to range of list values.
        {{- end }}


NAMED TEMPLATES: 

        Named template is used for templatize. It consists of define the template and refer the template. 

        Define the template: 

                templates/_helpers.tpl                  -       _ file is skipped for manifest process.
                {{- define "labels"}}
                name: test-name 
                app: {{ .Release.Name }}
                {{- end }}

        Refer the template: 

                {{- template "labels" }}                -       Used to just expand the defined value.

                {{- template "labels" . }}              -       Used to expand the scope (Release.Name)

        NOTE:   It just copy from template and replace and cause intendation issue. 
                Cannot use indent with template. Use include instead of template to work with intend.
                
                TEMPLATE is part of the core Go text/template language. It always renders its results to the template output; it does not produce a value and its result cannot be captured in a variable or included in a pipeline.
                INCLUDE is a Helm extension. It captures the template output and returns it as a string. 

                {{- include "labels" . | indent }}                 
                {{- include "labels" . | indent 2 }}                 
                {{- include "labels" . | indent 4 }}                 

CHART HOOKS: 

        verify -> render -> pre-install -> install -> post-install
        verify -> render -> pre-delete -> delete -> post-delete 
        verify -> render -> pre-rollback -> rollback -> post-rollback
        verify -> render -> pre-upgrade -> upgrade -> post-upgrade 

        1. create a job in yaml and place under templates.

        2. add annotation in job, so consider as pre process. 
                annotations: 
                        "helm.sh/hook": pre-upgrade / pre-delete / pre-rollback / pre-install 

        3. If multiple pre/pro process, then set the weight to run the job sequentially. 
                - to + in ascending order. - runs first followed by + , so runs in -2 -1 0 1 2 3 
                same weight can be assigned to multiple hooks. 

                annotation: 
                        "helm.sh/hook-weight": "5"

        4. After hook job is completed, whether to delete the resource or not. 
                annotations:
                        "helm.sh/hook-delete-policy": hook-succeeded / hook-failed / before-hook-creation


PACKAGING AND SIGNING CHARTS: 

        helm package ./chart                    -       package in tar format. 

        helm package --key --key "kay-name" --keyring /.gnupg/secring.gpg ./chart

        helm verify ./chart.tgz 

        helm install --verify ./chart           -       used to verify the chart.

        1. Create a key usign gpg.
        2. use the --sign for package. 
                will create .prov file. 
        

UPLOADING CHARTS:

        helm repo index         -       to generate index.yaml file. 

        It requires, 
                1. packaged component 
                2. index.yaml
                3. provisoner file.

---------------------------------------------------------------------------------------------------------
ADDITIONAL:
---------------------------------------------------------------------------------------------------------


        {{ if }}             -          if - is not given, then display empty line. 

              spec:
                ports:
                - port: 8080
                protocol: TCP
                targetPort: 8080
                
                nodePort: 30080
                
              selector:


        {{- if }}            -          if - is given, not display empty line. 

              spec:
                ports:
                - port: 8080
                protocol: TCP
                targetPort: 8080                
                nodePort: 30080                
              selector:




---------------------------------------------------------------------------------------------------------
HELM WITH EKS: 
---------------------------------------------------------------------------------------------------------

        helm uses kube config file for authentication with EKS. 
        
        kubectl config current-context          -       to get the context details.


